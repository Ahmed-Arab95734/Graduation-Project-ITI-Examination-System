/*
================================================================================
-- Author:         SQL Server Expert (Generated by Gemini)
-- Create date:    2025-10-24
-- Description:    CRUD Stored Procedures for Intake, Student, Question_Bank,
--                 Question_Choice, Rating, Student_Company, Student_Course.
--                 Includes comprehensive error handling and constraint checks.
================================================================================
*/

-- Make sure to run this in the context of your database
-- USE [YourDatabaseName];
GO

SET NOCOUNT ON;
GO

--------------------------------------------------------------------------------
-- Table: Intake
--------------------------------------------------------------------------------

-- =============================================
-- Create procedure for Intake
-- =============================================
CREATE PROCEDURE sp_Intake_Insert
    @Intake_ID INT,
    @Intake_Name NVARCHAR(200),
    @Intake_Type NVARCHAR(50),
    @Intake_Start_Date DATE,
    @Intake_End_Date DATE
AS
BEGIN
    SET NOCOUNT ON;
    BEGIN TRY
        BEGIN TRANSACTION;

        -- 1. Check for Primary Key conflict
        IF EXISTS (SELECT 1 FROM Intake WHERE Intake_ID = @Intake_ID)
        BEGIN
            RAISERROR('PK Error: Intake_ID %d already exists.', 16, 1, @Intake_ID);
            ROLLBACK TRANSACTION;
            RETURN -1;
        END;

        -- 2. Check CHECK Constraints (SQL Server will also do this, but explicit check is clearer)
        IF @Intake_Type NOT IN (N'Professional Training Program - (9 Months)', N'Intensive Code Camps - (4 Months)')
        BEGIN
            RAISERROR('CK Error: Intake_Type ''%s'' is not valid.', 16, 1, @Intake_Type);
            ROLLBACK TRANSACTION;
            RETURN -1;
        END;

        IF @Intake_End_Date <= @Intake_Start_Date
        BEGIN
            RAISERROR('CK Error: Intake_End_Date must be after Intake_Start_Date.', 16, 1);
            ROLLBACK TRANSACTION;
            RETURN -1;
        END;

        -- 3. Perform INSERT
        INSERT INTO Intake (Intake_ID, Intake_Name, Intake_Type, Intake_Start_Date, Intake_End_Date)
        VALUES (@Intake_ID, @Intake_Name, @Intake_Type, @Intake_Start_Date, @Intake_End_Date);

        COMMIT TRANSACTION;
        PRINT 'Intake record inserted successfully.';
        RETURN 0;
    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT > 0
            ROLLBACK TRANSACTION;

        DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
        DECLARE @ErrorNumber INT = ERROR_NUMBER();

        -- Handle specific errors
        IF @ErrorNumber = 2627 OR @ErrorNumber = 2601 -- Primary Key/Unique constraint
        BEGIN
            RAISERROR('PK/UK Error: An intake with ID %d already exists.', 16, 1, @Intake_ID);
        END
        ELSE IF @ErrorNumber = 547 -- CHECK or FOREIGN KEY constraint
        BEGIN
            RAISERROR('CK Error: The provided data violates a CHECK constraint (e.g., invalid Intake_Type or dates).', 16, 1);
        END
        ELSE IF @ErrorNumber = 515 -- NOT NULL constraint
        BEGIN
            RAISERROR('NULL Error: One or more required fields were NULL.', 16, 1);
        END
        ELSE
        BEGIN
            RAISERROR('Error inserting Intake: %s', 16, 1, @ErrorMessage);
        END
        RETURN -1;
    END CATCH
END;
GO

-- =============================================
-- Read procedure for Intake
-- =============================================
CREATE PROCEDURE sp_Intake_Select
    @Intake_ID INT = NULL -- NULL returns all
AS
BEGIN
    SET NOCOUNT ON;
    BEGIN TRY
        IF @Intake_ID IS NOT NULL
        BEGIN
            -- Select specific record
            SELECT * FROM Intake WHERE Intake_ID = @Intake_ID;
            IF @@ROWCOUNT = 0
                PRINT 'No Intake found with ID ' + CAST(@Intake_ID AS VARCHAR) + '.';
        END
        ELSE
        BEGIN
            -- Select all records
            SELECT * FROM Intake;
            IF @@ROWCOUNT = 0
                PRINT 'No Intakes found in the table.';
        END
    END TRY
    BEGIN CATCH
        DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
        RAISERROR('Error selecting Intake: %s', 16, 1, @ErrorMessage);
        RETURN -1;
    END CATCH
END;
GO

-- =============================================
-- Update procedure for Intake
-- =============================================
CREATE PROCEDURE sp_Intake_Update
    @Intake_ID INT,
    @Intake_Name NVARCHAR(200),
    @Intake_Type NVARCHAR(50),
    @Intake_Start_Date DATE,
    @Intake_End_Date DATE
AS
BEGIN
    SET NOCOUNT ON;
    BEGIN TRY
        BEGIN TRANSACTION;

        -- 1. Check if record exists
        IF NOT EXISTS (SELECT 1 FROM Intake WHERE Intake_ID = @Intake_ID)
        BEGIN
            RAISERROR('Not Found: Intake_ID %d does not exist.', 16, 1, @Intake_ID);
            ROLLBACK TRANSACTION;
            RETURN -1;
        END;

        -- 2. Check CHECK Constraints
        IF @Intake_Type NOT IN (N'Professional Training Program - (9 Months)', N'Intensive Code Camps - (4 Months)')
        BEGIN
            RAISERROR('CK Error: Intake_Type ''%s'' is not valid.', 16, 1, @Intake_Type);
            ROLLBACK TRANSACTION;
            RETURN -1;
        END;

        IF @Intake_End_Date <= @Intake_Start_Date
        BEGIN
            RAISERROR('CK Error: Intake_End_Date must be after Intake_Start_Date.', 16, 1);
            ROLLBACK TRANSACTION;
            RETURN -1;
        END;

        -- 3. Perform UPDATE
        UPDATE Intake
        SET Intake_Name = @Intake_Name,
            Intake_Type = @Intake_Type,
            Intake_Start_Date = @Intake_Start_Date,
            Intake_End_Date = @Intake_End_Date
        WHERE Intake_ID = @Intake_ID;

        COMMIT TRANSACTION;
        PRINT 'Intake record updated successfully.';
        RETURN 0;
    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT > 0
            ROLLBACK TRANSACTION;

        DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
        DECLARE @ErrorNumber INT = ERROR_NUMBER();

        IF @ErrorNumber = 547 -- CHECK constraint
        BEGIN
            RAISERROR('CK Error: The provided data violates a CHECK constraint (e.g., invalid Intake_Type or dates).', 16, 1);
        END
        ELSE IF @ErrorNumber = 515 -- NOT NULL constraint
        BEGIN
            RAISERROR('NULL Error: One or more required fields were set to NULL.', 16, 1);
        END
        ELSE
        BEGIN
            RAISERROR('Error updating Intake: %s', 16, 1, @ErrorMessage);
        END
        RETURN -1;
    END CATCH
END;
GO

-- =============================================
-- Delete procedure for Intake
-- =============================================
CREATE PROCEDURE sp_Intake_Delete
    @Intake_ID INT
AS
BEGIN
    SET NOCOUNT ON;
    BEGIN TRY
        BEGIN TRANSACTION;

        -- 1. Check if record exists
        IF NOT EXISTS (SELECT 1 FROM Intake WHERE Intake_ID = @Intake_ID)
        BEGIN
            RAISERROR('Not Found: Intake_ID %d does not exist.', 16, 1, @Intake_ID);
            ROLLBACK TRANSACTION;
            RETURN -1;
        END;
        
        -- 2. Check for related records in [Group] (Intake_Branch_Track)
        -- The schema has ON DELETE CASCADE, so this check is optional but good to inform.
        IF EXISTS (SELECT 1 FROM [Group] WHERE Intake_ID = @Intake_ID)
        BEGIN
            PRINT 'Warning: Deleting this Intake will also cascade delete related records in [Group].';
        END;

        -- 3. Perform DELETE
        DELETE FROM Intake
        WHERE Intake_ID = @Intake_ID;

        COMMIT TRANSACTION;
        PRINT 'Intake record deleted successfully.';
        RETURN 0;
    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT > 0
            ROLLBACK TRANSACTION;

        DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
        DECLARE @ErrorNumber INT = ERROR_NUMBER();

        -- Error 547 is for FK constraint violations if CASCADE was not set
        IF @ErrorNumber = 547
        BEGIN
            RAISERROR('FK Error: Cannot delete Intake. It is referenced by other tables (e.g., Group) and ON DELETE CASCADE failed or is not set.', 16, 1);
        END
        ELSE
        BEGIN
            RAISERROR('Error deleting Intake: %s', 16, 1, @ErrorMessage);
        END
        RETURN -1;
    END CATCH
END;
GO

--------------------------------------------------------------------------------
-- Table: Question_Bank
--------------------------------------------------------------------------------

-- =============================================
-- Create procedure for Question_Bank
-- =============================================
CREATE PROCEDURE sp_Question_Bank_Insert
    @Question_ID INT,
    @Course_ID INT,
    @Question_Type NVARCHAR(50),
    @Question_Description NVARCHAR(1000),
    @Question_Model_Answer NVARCHAR(1000)
AS
BEGIN
    SET NOCOUNT ON;
    BEGIN TRY
        BEGIN TRANSACTION;

        -- 1. Check for Primary Key conflict
        IF EXISTS (SELECT 1 FROM Question_Bank WHERE Question_ID = @Question_ID)
        BEGIN
            RAISERROR('PK Error: Question_ID %d already exists.', 16, 1, @Question_ID);
            ROLLBACK TRANSACTION;
            RETURN -1;
        END;

        -- 2. Check Foreign Key (Course)
        IF NOT EXISTS (SELECT 1 FROM Course WHERE Course_ID = @Course_ID)
        BEGIN
            RAISERROR('FK Error: Course_ID %d does not exist in Course table.', 16, 1, @Course_ID);
            ROLLBACK TRANSACTION;
            RETURN -1;
        END;

        -- 3. Check CHECK Constraint
        IF @Question_Type NOT IN (N'MCQ', N'True/False')
        BEGIN
            RAISERROR('CK Error: Question_Type ''%s'' is not valid. Must be ''MCQ'' or ''True/False''.', 16, 1, @Question_Type);
            ROLLBACK TRANSACTION;
            RETURN -1;
        END;

        -- 4. Perform INSERT
        INSERT INTO Question_Bank (Question_ID, Course_ID, Question_Type, Question_Description, Question_Model_Answer)
        VALUES (@Question_ID, @Course_ID, @Question_Type, @Question_Description, @Question_Model_Answer);

        COMMIT TRANSACTION;
        PRINT 'Question_Bank record inserted successfully.';
        RETURN 0;
    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT > 0
            ROLLBACK TRANSACTION;

        DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
        DECLARE @ErrorNumber INT = ERROR_NUMBER();

        IF @ErrorNumber = 2627 OR @ErrorNumber = 2601 -- PK/UK
        BEGIN
            RAISERROR('PK Error: Question_ID %d already exists.', 16, 1, @Question_ID);
        END
        ELSE IF @ErrorNumber = 547 -- FK or CHECK
        BEGIN
            IF CHARINDEX('FK_Question_Bank_Course', @ErrorMessage) > 0
                RAISERROR('FK Error: Course_ID %d does not exist.', 16, 1, @Course_ID);
            ELSE
                RAISERROR('CK Error: Invalid Question_Type ''%s''.', 16, 1, @Question_Type);
        END
        ELSE IF @ErrorNumber = 515 -- NOT NULL
        BEGIN
            RAISERROR('NULL Error: One or more required fields were NULL.', 16, 1);
        END
        ELSE
        BEGIN
            RAISERROR('Error inserting Question_Bank: %s', 16, 1, @ErrorMessage);
        END
        RETURN -1;
    END CATCH
END;
GO

-- =============================================
-- Read procedure for Question_Bank
-- =============================================
CREATE PROCEDURE sp_Question_Bank_Select
    @Question_ID INT = NULL, -- Specific question
    @Course_ID INT = NULL   -- All questions for a course
AS
BEGIN
    SET NOCOUNT ON;
    BEGIN TRY
        IF @Question_ID IS NOT NULL
        BEGIN
            SELECT * FROM Question_Bank WHERE Question_ID = @Question_ID;
            IF @@ROWCOUNT = 0
                PRINT 'No Question found with ID ' + CAST(@Question_ID AS VARCHAR) + '.';
        END
        ELSE IF @Course_ID IS NOT NULL
        BEGIN
            SELECT * FROM Question_Bank WHERE Course_ID = @Course_ID;
             IF @@ROWCOUNT = 0
                PRINT 'No Questions found for Course_ID ' + CAST(@Course_ID AS VARCHAR) + '.';
        END
        ELSE
        BEGIN
            SELECT * FROM Question_Bank;
            IF @@ROWCOUNT = 0
                PRINT 'No Questions found in the table.';
        END
    END TRY
    BEGIN CATCH
        DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
        RAISERROR('Error selecting Question_Bank: %s', 16, 1, @ErrorMessage);
        RETURN -1;
    END CATCH
END;
GO

-- =============================================
-- Update procedure for Question_Bank
-- =============================================
CREATE PROCEDURE sp_Question_Bank_Update
    @Question_ID INT,
    @Course_ID INT,
    @Question_Type NVARCHAR(50),
    @Question_Description NVARCHAR(1000),
    @Question_Model_Answer NVARCHAR(1000)
AS
BEGIN
    SET NOCOUNT ON;
    BEGIN TRY
        BEGIN TRANSACTION;

        -- 1. Check if record exists
        IF NOT EXISTS (SELECT 1 FROM Question_Bank WHERE Question_ID = @Question_ID)
        BEGIN
            RAISERROR('Not Found: Question_ID %d does not exist.', 16, 1, @Question_ID);
            ROLLBACK TRANSACTION;
            RETURN -1;
        END;

        -- 2. Check Foreign Key (Course)
        IF NOT EXISTS (SELECT 1 FROM Course WHERE Course_ID = @Course_ID)
        BEGIN
            RAISERROR('FK Error: Course_ID %d does not exist in Course table.', 16, 1, @Course_ID);
            ROLLBACK TRANSACTION;
            RETURN -1;
        END;

        -- 3. Check CHECK Constraint
        IF @Question_Type NOT IN (N'MCQ', N'True/False')
        BEGIN
            RAISERROR('CK Error: Question_Type ''%s'' is not valid. Must be ''MCQ'' or ''True/False''.', 16, 1, @Question_Type);
            ROLLBACK TRANSACTION;
            RETURN -1;
        END;

        -- 4. Perform UPDATE
        UPDATE Question_Bank
        SET Course_ID = @Course_ID,
            Question_Type = @Question_Type,
            Question_Description = @Question_Description,
            Question_Model_Answer = @Question_Model_Answer
        WHERE Question_ID = @Question_ID;

        COMMIT TRANSACTION;
        PRINT 'Question_Bank record updated successfully.';
        RETURN 0;
    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT > 0
            ROLLBACK TRANSACTION;

        DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
        DECLARE @ErrorNumber INT = ERROR_NUMBER();

        IF @ErrorNumber = 547 -- FK or CHECK
        BEGIN
            IF CHARINDEX('FK_Question_Bank_Course', @ErrorMessage) > 0
                RAISERROR('FK Error: Course_ID %d does not exist.', 16, 1, @Course_ID);
            ELSE
                RAISERROR('CK Error: Invalid Question_Type ''%s''.', 16, 1, @Question_Type);
        END
        ELSE IF @ErrorNumber = 515 -- NOT NULL
        BEGIN
            RAISERROR('NULL Error: One or more required fields were set to NULL.', 16, 1);
        END
        ELSE
        BEGIN
            RAISERROR('Error updating Question_Bank: %s', 16, 1, @ErrorMessage);
        END
        RETURN -1;
    END CATCH
END;
GO

-- =============================================
-- Delete procedure for Question_Bank
-- =============================================
CREATE PROCEDURE sp_Question_Bank_Delete
    @Question_ID INT
AS
BEGIN
    SET NOCOUNT ON;
    BEGIN TRY
        BEGIN TRANSACTION;

        -- 1. Check if record exists
        IF NOT EXISTS (SELECT 1 FROM Question_Bank WHERE Question_ID = @Question_ID)
        BEGIN
            RAISERROR('Not Found: Question_ID %d does not exist.', 16, 1, @Question_ID);
            ROLLBACK TRANSACTION;
            RETURN -1;
        END;

        -- 2. Check for related records (NO ACTION FKs)
        IF EXISTS (SELECT 1 FROM Exam_Questions WHERE Question_ID = @Question_ID)
        BEGIN
            RAISERROR('FK Error: Cannot delete Question. It is referenced by Exam_Questions. Remove those references first.', 16, 1);
            ROLLBACK TRANSACTION;
            RETURN -1;
        END;

        IF EXISTS (SELECT 1 FROM Student_Exam_Answer WHERE Question_ID = @Question_ID)
        BEGIN
            RAISERROR('FK Error: Cannot delete Question. It is referenced by Student_Exam_Answer. Remove those references first.', 16, 1);
            ROLLBACK TRANSACTION;
            RETURN -1;
        END;

        -- 3. Perform DELETE (will cascade to Question_Choice)
        PRINT 'Note: Deleting this question will also cascade delete all related Question_Choice records.';
        DELETE FROM Question_Bank
        WHERE Question_ID = @Question_ID;

        COMMIT TRANSACTION;
        PRINT 'Question_Bank record deleted successfully.';
        RETURN 0;
    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT > 0
            ROLLBACK TRANSACTION;

        DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
        DECLARE @ErrorNumber INT = ERROR_NUMBER();

        IF @ErrorNumber = 547
        BEGIN
            RAISERROR('FK Error: Cannot delete Question. It is referenced by other tables (Exam_Questions, Student_Exam_Answer).', 16, 1);
        END
        ELSE
        BEGIN
            RAISERROR('Error deleting Question_Bank: %s', 16, 1, @ErrorMessage);
        END
        RETURN -1;
    END CATCH
END;
GO

--------------------------------------------------------------------------------
-- Table: Question_Choice
--------------------------------------------------------------------------------

-- =============================================
-- Create procedure for Question_Choice
-- =============================================
CREATE PROCEDURE sp_Question_Choice_Insert
    @Question_Choice_ID INT,
    @Question_ID INT,
    @Choice_Text NVARCHAR(500)
AS
BEGIN
    SET NOCOUNT ON;
    BEGIN TRY
        BEGIN TRANSACTION;

        -- 1. Check for Primary Key conflict
        IF EXISTS (SELECT 1 FROM Question_Choice WHERE Question_Choice_ID = @Question_Choice_ID)
        BEGIN
            RAISERROR('PK Error: Question_Choice_ID %d already exists.', 16, 1, @Question_Choice_ID);
            ROLLBACK TRANSACTION;
            RETURN -1;
        END;

        -- 2. Check Foreign Key (Question_Bank)
        IF NOT EXISTS (SELECT 1 FROM Question_Bank WHERE Question_ID = @Question_ID)
        BEGIN
            RAISERROR('FK Error: Question_ID %d does not exist in Question_Bank table.', 16, 1, @Question_ID);
            ROLLBACK TRANSACTION;
            RETURN -1;
        END;

        -- 3. Perform INSERT
        INSERT INTO Question_Choice (Question_Choice_ID, Question_ID, Choice_Text)
        VALUES (@Question_Choice_ID, @Question_ID, @Choice_Text);

        COMMIT TRANSACTION;
        PRINT 'Question_Choice record inserted successfully.';
        RETURN 0;
    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT > 0
            ROLLBACK TRANSACTION;

        DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
        DECLARE @ErrorNumber INT = ERROR_NUMBER();

        IF @ErrorNumber = 2627 OR @ErrorNumber = 2601 -- PK
        BEGIN
            RAISERROR('PK Error: Question_Choice_ID %d already exists.', 16, 1, @Question_Choice_ID);
        END
        ELSE IF @ErrorNumber = 547 -- FK
        BEGIN
            RAISERROR('FK Error: Question_ID %d does not exist in Question_Bank.', 16, 1, @Question_ID);
        END
        ELSE IF @ErrorNumber = 515 -- NOT NULL
        BEGIN
            RAISERROR('NULL Error: One or more required fields were NULL.', 16, 1);
        END
        ELSE
        BEGIN
            RAISERROR('Error inserting Question_Choice: %s', 16, 1, @ErrorMessage);
        END
        RETURN -1;
    END CATCH
END;
GO

-- =============================================
-- Read procedure for Question_Choice
-- =============================================
CREATE PROCEDURE sp_Question_Choice_Select
    @Question_Choice_ID INT = NULL, -- Specific choice
    @Question_ID INT = NULL          -- All choices for a question
AS
BEGIN
    SET NOCOUNT ON;
    BEGIN TRY
        IF @Question_Choice_ID IS NOT NULL
        BEGIN
            SELECT * FROM Question_Choice WHERE Question_Choice_ID = @Question_Choice_ID;
            IF @@ROWCOUNT = 0
                PRINT 'No Question_Choice found with ID ' + CAST(@Question_Choice_ID AS VARCHAR) + '.';
        END
        ELSE IF @Question_ID IS NOT NULL
        BEGIN
            SELECT * FROM Question_Choice WHERE Question_ID = @Question_ID;
            IF @@ROWCOUNT = 0
                PRINT 'No Question_Choices found for Question_ID ' + CAST(@Question_ID AS VARCHAR) + '.';
        END
        ELSE
        BEGIN
            SELECT * FROM Question_Choice;
            IF @@ROWCOUNT = 0
                PRINT 'No Question_Choices found in the table.';
        END
    END TRY
    BEGIN CATCH
        DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
        RAISERROR('Error selecting Question_Choice: %s', 16, 1, @ErrorMessage);
        RETURN -1;
    END CATCH
END;
GO

-- =============================================
-- Update procedure for Question_Choice
-- =============================================
CREATE PROCEDURE sp_Question_Choice_Update
    @Question_Choice_ID INT,
    @Question_ID INT,
    @Choice_Text NVARCHAR(500)
AS
BEGIN
    SET NOCOUNT ON;
    BEGIN TRY
        BEGIN TRANSACTION;

        -- 1. Check if record exists
        IF NOT EXISTS (SELECT 1 FROM Question_Choice WHERE Question_Choice_ID = @Question_Choice_ID)
        BEGIN
            RAISERROR('Not Found: Question_Choice_ID %d does not exist.', 16, 1, @Question_Choice_ID);
            ROLLBACK TRANSACTION;
            RETURN -1;
        END;

        -- 2. Check Foreign Key (Question_Bank)
        IF NOT EXISTS (SELECT 1 FROM Question_Bank WHERE Question_ID = @Question_ID)
        BEGIN
            RAISERROR('FK Error: Question_ID %d does not exist in Question_Bank table.', 16, 1, @Question_ID);
            ROLLBACK TRANSACTION;
            RETURN -1;
        END;

        -- 3. Perform UPDATE
        UPDATE Question_Choice
        SET Question_ID = @Question_ID,
            Choice_Text = @Choice_Text
        WHERE Question_Choice_ID = @Question_Choice_ID;

        COMMIT TRANSACTION;
        PRINT 'Question_Choice record updated successfully.';
        RETURN 0;
    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT > 0
            ROLLBACK TRANSACTION;

        DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
        DECLARE @ErrorNumber INT = ERROR_NUMBER();

        IF @ErrorNumber = 547 -- FK
        BEGIN
            RAISERROR('FK Error: Question_ID %d does not exist in Question_Bank.', 16, 1, @Question_ID);
        END
        ELSE IF @ErrorNumber = 515 -- NOT NULL
        BEGIN
            RAISERROR('NULL Error: One or more required fields were set to NULL.', 16, 1);
        END
        ELSE
        BEGIN
            RAISERROR('Error updating Question_Choice: %s', 16, 1, @ErrorMessage);
        END
        RETURN -1;
    END CATCH
END;
GO

-- =============================================
-- Delete procedure for Question_Choice
-- =============================================
CREATE PROCEDURE sp_Question_Choice_Delete
    @Question_Choice_ID INT
AS
BEGIN
    SET NOCOUNT ON;
    BEGIN TRY
        BEGIN TRANSACTION;

        -- 1. Check if record exists
        IF NOT EXISTS (SELECT 1 FROM Question_Choice WHERE Question_Choice_ID = @Question_Choice_ID)
        BEGIN
            RAISERROR('Not Found: Question_Choice_ID %d does not exist.', 16, 1, @Question_Choice_ID);
            ROLLBACK TRANSACTION;
            RETURN -1;
        END;

        -- 2. Perform DELETE (No FKs point *from* this table)
        DELETE FROM Question_Choice
        WHERE Question_Choice_ID = @Question_Choice_ID;

        COMMIT TRANSACTION;
        PRINT 'Question_Choice record deleted successfully.';
        RETURN 0;
    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT > 0
            ROLLBACK TRANSACTION;

        DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
        RAISERROR('Error deleting Question_Choice: %s', 16, 1, @ErrorMessage);
        RETURN -1;
    END CATCH
END;
GO

--------------------------------------------------------------------------------
-- Table: Rating
--------------------------------------------------------------------------------

-- =============================================
-- Create procedure for Rating
-- =============================================
CREATE PROCEDURE sp_Rating_Insert
    @Student_ID INT,
    @Instructor_ID INT,
    @RatingValue TINYINT
AS
BEGIN
    SET NOCOUNT ON;
    BEGIN TRY
        BEGIN TRANSACTION;

        -- 1. Check for Composite Primary Key conflict
        IF EXISTS (SELECT 1 FROM Rating WHERE Student_ID = @Student_ID AND Instructor_ID = @Instructor_ID)
        BEGIN
            RAISERROR('PK Error: A rating from Student %d for Instructor %d already exists.', 16, 1, @Student_ID, @Instructor_ID);
            ROLLBACK TRANSACTION;
            RETURN -1;
        END;

        -- 2. Check Foreign Key (Student)
        IF NOT EXISTS (SELECT 1 FROM Student WHERE Student_ID = @Student_ID)
        BEGIN
            RAISERROR('FK Error: Student_ID %d does not exist in Student table.', 16, 1, @Student_ID);
            ROLLBACK TRANSACTION;
            RETURN -1;
        END;

        -- 3. Check Foreign Key (Instructor)
        IF NOT EXISTS (SELECT 1 FROM Instructor WHERE Instructor_ID = @Instructor_ID)
        BEGIN
            RAISERROR('FK Error: Instructor_ID %d does not exist in Instructor table.', 16, 1, @Instructor_ID);
            ROLLBACK TRANSACTION;
            RETURN -1;
        END;

        -- 4. Check CHECK Constraint
        IF @RatingValue NOT BETWEEN 1 AND 10
        BEGIN
            RAISERROR('CK Error: RatingValue %d is not valid. Must be between 1 and 10.', 16, 1, @RatingValue);
            ROLLBACK TRANSACTION;
            RETURN -1;
        END;

        -- 5. Perform INSERT
        INSERT INTO Rating (Student_ID, Instructor_ID, RatingValue)
        VALUES (@Student_ID, @Instructor_ID, @RatingValue);

        COMMIT TRANSACTION;
        PRINT 'Rating record inserted successfully.';
        RETURN 0;
    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT > 0
            ROLLBACK TRANSACTION;

        DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
        DECLARE @ErrorNumber INT = ERROR_NUMBER();

        IF @ErrorNumber = 2627 OR @ErrorNumber = 2601 -- PK
        BEGIN
            RAISERROR('PK Error: A rating from Student %d for Instructor %d already exists.', 16, 1, @Student_ID, @Instructor_ID);
        END
        ELSE IF @ErrorNumber = 547 -- FK or CHECK
        BEGIN
            IF CHARINDEX('FK_Rating_Student', @ErrorMessage) > 0
                RAISERROR('FK Error: Student_ID %d does not exist.', 16, 1, @Student_ID);
            ELSE IF CHARINDEX('FK_Rating_Instructor', @ErrorMessage) > 0
                RAISERROR('FK Error: Instructor_ID %d does not exist.', 16, 1, @Instructor_ID);
            ELSE
                RAISERROR('CK Error: RatingValue %d is not valid (must be 1-10).', 16, 1, @RatingValue);
        END
        ELSE IF @ErrorNumber = 515 -- NOT NULL
        BEGIN
            RAISERROR('NULL Error: One or more required fields were NULL.', 16, 1);
        END
        ELSE
        BEGIN
            RAISERROR('Error inserting Rating: %s', 16, 1, @ErrorMessage);
        END
        RETURN -1;
    END CATCH
END;
GO

-- =============================================
-- Read procedure for Rating
-- =============================================
CREATE PROCEDURE sp_Rating_Select
    @Student_ID INT = NULL,
    @Instructor_ID INT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    BEGIN TRY
        IF @Student_ID IS NOT NULL AND @Instructor_ID IS NOT NULL
        BEGIN
            -- Select specific record
            SELECT * FROM Rating WHERE Student_ID = @Student_ID AND Instructor_ID = @Instructor_ID;
        END
        ELSE IF @Student_ID IS NOT NULL
        BEGIN
            -- Select all ratings by a student
            SELECT * FROM Rating WHERE Student_ID = @Student_ID;
        END
        ELSE IF @Instructor_ID IS NOT NULL
        BEGIN
            -- Select all ratings for an instructor
            SELECT * FROM Rating WHERE Instructor_ID = @Instructor_ID;
        END
        ELSE
        BEGIN
            -- Select all records
            SELECT * FROM Rating;
        END
    END TRY
    BEGIN CATCH
        DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
        RAISERROR('Error selecting Rating: %s', 16, 1, @ErrorMessage);
        RETURN -1;
    END CATCH
END;
GO

-- =============================================
-- Update procedure for Rating
-- =============================================
CREATE PROCEDURE sp_Rating_Update
    @Student_ID INT,
    @Instructor_ID INT,
    @RatingValue TINYINT
AS
BEGIN
    SET NOCOUNT ON;
    BEGIN TRY
        BEGIN TRANSACTION;

        -- 1. Check if record exists
        IF NOT EXISTS (SELECT 1 FROM Rating WHERE Student_ID = @Student_ID AND Instructor_ID = @Instructor_ID)
        BEGIN
            RAISERROR('Not Found: Rating from Student %d for Instructor %d does not exist.', 16, 1, @Student_ID, @Instructor_ID);
            ROLLBACK TRANSACTION;
            RETURN -1;
        END;

        -- 2. Check CHECK Constraint
        IF @RatingValue NOT BETWEEN 1 AND 10
        BEGIN
            RAISERROR('CK Error: RatingValue %d is not valid. Must be between 1 and 10.', 16, 1, @RatingValue);
            ROLLBACK TRANSACTION;
            RETURN -1;
        END;

        -- 3. Perform UPDATE
        UPDATE Rating
        SET RatingValue = @RatingValue
        WHERE Student_ID = @Student_ID AND Instructor_ID = @Instructor_ID;

        COMMIT TRANSACTION;
        PRINT 'Rating record updated successfully.';
        RETURN 0;
    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT > 0
            ROLLBACK TRANSACTION;

        DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
        DECLARE @ErrorNumber INT = ERROR_NUMBER();

        IF @ErrorNumber = 547 -- CHECK
        BEGIN
            RAISERROR('CK Error: RatingValue %d is not valid (must be 1-10).', 16, 1, @RatingValue);
        END
        ELSE
        BEGIN
            RAISERROR('Error updating Rating: %s', 16, 1, @ErrorMessage);
        END
        RETURN -1;
    END CATCH
END;
GO

-- =============================================
-- Delete procedure for Rating
-- =============================================
CREATE PROCEDURE sp_Rating_Delete
    @Student_ID INT,
    @Instructor_ID INT
AS
BEGIN
    SET NOCOUNT ON;
    BEGIN TRY
        BEGIN TRANSACTION;

        -- 1. Check if record exists
        IF NOT EXISTS (SELECT 1 FROM Rating WHERE Student_ID = @Student_ID AND Instructor_ID = @Instructor_ID)
        BEGIN
            RAISERROR('Not Found: Rating from Student %d for Instructor %d does not exist.', 16, 1, @Student_ID, @Instructor_ID);
            ROLLBACK TRANSACTION;
            RETURN -1;
        END;

        -- 2. Perform DELETE (No FKs point *from* this table)
        DELETE FROM Rating
        WHERE Student_ID = @Student_ID AND Instructor_ID = @Instructor_ID;

        COMMIT TRANSACTION;
        PRINT 'Rating record deleted successfully.';
        RETURN 0;
    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT > 0
            ROLLBACK TRANSACTION;

        DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
        RAISERROR('Error deleting Rating: %s', 16, 1, @ErrorMessage);
        RETURN -1;
    END CATCH
END;
GO

--------------------------------------------------------------------------------
-- Table: Student
--------------------------------------------------------------------------------

-- =============================================
-- Create procedure for Student
-- =============================================
CREATE PROCEDURE sp_Student_Insert
    @Student_ID INT,
    @Student_Mail NVARCHAR(100),
    @Student_Address NVARCHAR(255),
    @Student_Gender NVARCHAR(10),
    @Student_Marital_Status NVARCHAR(50),
    @Student_Fname NVARCHAR(50),
    @Student_Lname NVARCHAR(50),
    @Student_Birthdate DATE,
    @Student_Faculty NVARCHAR(100),
    @Student_Faculty_Grade NVARCHAR(50),
    @Student_ITI_Status NVARCHAR(50),
    @Intake_Branch_Track_ID INT -- Renamed to Group_ID in the schema
AS
BEGIN
    SET NOCOUNT ON;
    BEGIN TRY
        BEGIN TRANSACTION;

        -- 1. Check for Primary Key conflict
        IF EXISTS (SELECT 1 FROM Student WHERE Student_ID = @Student_ID)
        BEGIN
            RAISERROR('PK Error: Student_ID %d already exists.', 16, 1, @Student_ID);
            ROLLBACK TRANSACTION;
            RETURN -1;
        END;

        -- 2. Check for Unique Key conflict (Email)
        IF EXISTS (SELECT 1 FROM Student WHERE Student_Mail = @Student_Mail)
        BEGIN
            RAISERROR('UK Error: Student_Mail ''%s'' already exists.', 16, 1, @Student_Mail);
            ROLLBACK TRANSACTION;
            RETURN -1;
        END;

        -- 3. Check Foreign Key (Group)
        IF NOT EXISTS (SELECT 1 FROM [Group] WHERE Group_ID = @Intake_Branch_Track_ID)
        BEGIN
            RAISERROR('FK Error: Group_ID (Intake_Branch_Track_ID) %d does not exist in [Group] table.', 16, 1, @Intake_Branch_Track_ID);
            ROLLBACK TRANSACTION;
            RETURN -1;
        END;

        -- 4. Check CHECK Constraints (Abbreviated for brevity, SQL Server will enforce)
        IF @Student_Gender NOT IN (N'Male', N'Female') OR
           @Student_Marital_Status NOT IN (N'Married', N'Single') OR
           DATEADD(YEAR, 22, @Student_Birthdate) > GETDATE() OR
           @Student_Faculty_Grade NOT IN (N'Excellent', N'Very Good', N'Good', N'Pass') OR
           @Student_ITI_Status NOT IN (N'Graduated', N'Failed to Graduate', N'In Progress')
        BEGIN
            RAISERROR('CK Error: One or more check constraints violated (Gender, Marital_Status, Age < 22, Faculty_Grade, ITI_Status).', 16, 1);
            ROLLBACK TRANSACTION;
            RETURN -1;
        END;
        
        -- 5. Perform INSERT
        INSERT INTO Student (
            Student_ID, Student_Mail, Student_Address, Student_Gender, Student_Marital_Status,
            Student_Fname, Student_Lname, Student_Birthdate, Student_Faculty,
            Student_Faculty_Grade, Student_ITI_Status, Intake_Branch_Track_ID
        )
        VALUES (
            @Student_ID, @Student_Mail, @Student_Address, @Student_Gender, @Student_Marital_Status,
            @Student_Fname, @Student_Lname, @Student_Birthdate, @Student_Faculty,
            @Student_Faculty_Grade, @Student_ITI_Status, @Intake_Branch_Track_ID
        );

        COMMIT TRANSACTION;
        PRINT 'Student record inserted successfully.';
        RETURN 0;
    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT > 0
            ROLLBACK TRANSACTION;

        DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
        DECLARE @ErrorNumber INT = ERROR_NUMBER();

        IF @ErrorNumber = 2627 OR @ErrorNumber = 2601 -- PK/UK
        BEGIN
            IF CHARINDEX('Student_Mail', @ErrorMessage) > 0
                RAISERROR('UK Error: Student_Mail ''%s'' already exists.', 16, 1, @Student_Mail);
            ELSE
                RAISERROR('PK Error: Student_ID %d already exists.', 16, 1, @Student_ID);
        END
        ELSE IF @ErrorNumber = 547 -- FK or CHECK
        BEGIN
            IF CHARINDEX('FK_Student_Group', @ErrorMessage) > 0
                RAISERROR('FK Error: Group_ID %d does not exist.', 16, 1, @Intake_Branch_Track_ID);
            ELSE
                RAISERROR('CK Error: Data violates a CHECK constraint (Gender, Marital_Status, Age, Grade, Status).', 16, 1);
        END
        ELSE IF @ErrorNumber = 515 -- NOT NULL
        BEGIN
            RAISERROR('NULL Error: One or more required fields were NULL.', 16, 1);
        END
        ELSE
        BEGIN
            RAISERROR('Error inserting Student: %s', 16, 1, @ErrorMessage);
        END
        RETURN -1;
    END CATCH
END;
GO

-- =============================================
-- Read procedure for Student
-- =============================================
CREATE PROCEDURE sp_Student_Select
    @Student_ID INT = NULL,
    @GroupID INT = NULL -- Intake_Branch_Track_ID
AS
BEGIN
    SET NOCOUNT ON;
    BEGIN TRY
        IF @Student_ID IS NOT NULL
        BEGIN
            SELECT * FROM Student WHERE Student_ID = @Student_ID;
            IF @@ROWCOUNT = 0
                PRINT 'No Student found with ID ' + CAST(@Student_ID AS VARCHAR) + '.';
        END
        ELSE IF @GroupID IS NOT NULL
        BEGIN
            SELECT * FROM Student WHERE Intake_Branch_Track_ID = @GroupID;
             IF @@ROWCOUNT = 0
                PRINT 'No Students found for Group_ID ' + CAST(@GroupID AS VARCHAR) + '.';
        END
        ELSE
        BEGIN
            SELECT * FROM Student;
            IF @@ROWCOUNT = 0
                PRINT 'No Students found in the table.';
        END
    END TRY
    BEGIN CATCH
        DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
        RAISERROR('Error selecting Student: %s', 16, 1, @ErrorMessage);
        RETURN -1;
    END CATCH
END;
GO

-- =============================================
-- Update procedure for Student
-- =============================================
CREATE PROCEDURE sp_Student_Update
    @Student_ID INT,
    @Student_Mail NVARCHAR(100),
    @Student_Address NVARCHAR(255),
    @Student_Gender NVARCHAR(10),
    @Student_Marital_Status NVARCHAR(50),
    @Student_Fname NVARCHAR(50),
    @Student_Lname NVARCHAR(50),
    @Student_Birthdate DATE,
    @Student_Faculty NVARCHAR(100),
    @Student_Faculty_Grade NVARCHAR(50),
    @Student_ITI_Status NVARCHAR(50),
    @Intake_Branch_Track_ID INT
AS
BEGIN
    SET NOCOUNT ON;
    BEGIN TRY
        BEGIN TRANSACTION;

        -- 1. Check if record exists
        IF NOT EXISTS (SELECT 1 FROM Student WHERE Student_ID = @Student_ID)
        BEGIN
            RAISERROR('Not Found: Student_ID %d does not exist.', 16, 1, @Student_ID);
            ROLLBACK TRANSACTION;
            RETURN -1;
        END;

        -- 2. Check for Unique Key conflict (Email)
        IF EXISTS (SELECT 1 FROM Student WHERE Student_Mail = @Student_Mail AND Student_ID != @Student_ID)
        BEGIN
            RAISERROR('UK Error: Student_Mail ''%s'' is already in use by another student.', 16, 1, @Student_Mail);
            ROLLBACK TRANSACTION;
            RETURN -1;
        END;

        -- 3. Check Foreign Key (Group)
        IF NOT EXISTS (SELECT 1 FROM [Group] WHERE Group_ID = @Intake_Branch_Track_ID)
        BEGIN
            RAISERROR('FK Error: Group_ID (Intake_Branch_Track_ID) %d does not exist in [Group] table.', 16, 1, @Intake_Branch_Track_ID);
            ROLLBACK TRANSACTION;
            RETURN -1;
        END;

        -- 4. Check CHECK Constraints
        IF @Student_Gender NOT IN (N'Male', N'Female') OR
           @Student_Marital_Status NOT IN (N'Married', N'Single') OR
           DATEADD(YEAR, 22, @Student_Birthdate) > GETDATE() OR
           @Student_Faculty_Grade NOT IN (N'Excellent', N'Very Good', N'Good', N'Pass') OR
           @Student_ITI_Status NOT IN (N'Graduated', N'Failed to Graduate', N'In Progress')
        BEGIN
            RAISERROR('CK Error: One or more check constraints violated (Gender, Marital_Status, Age < 22, Faculty_Grade, ITI_Status).', 16, 1);
            ROLLBACK TRANSACTION;
            RETURN -1;
        END;

        -- 5. Perform UPDATE
        UPDATE Student
        SET Student_Mail = @Student_Mail,
            Student_Address = @Student_Address,
            Student_Gender = @Student_Gender,
            Student_Marital_Status = @Student_Marital_Status,
            Student_Fname = @Student_Fname,
            Student_Lname = @Student_Lname,
            Student_Birthdate = @Student_Birthdate,
            Student_Faculty = @Student_Faculty,
            Student_Faculty_Grade = @Student_Faculty_Grade,
            Student_ITI_Status = @Student_ITI_Status,
            Intake_Branch_Track_ID = @Intake_Branch_Track_ID
        WHERE Student_ID = @Student_ID;

        COMMIT TRANSACTION;
        PRINT 'Student record updated successfully.';
        RETURN 0;
    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT > 0
            ROLLBACK TRANSACTION;

        DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
        DECLARE @ErrorNumber INT = ERROR_NUMBER();

        IF @ErrorNumber = 2627 OR @ErrorNumber = 2601 -- UK
        BEGIN
            RAISERROR('UK Error: Student_Mail ''%s'' already exists.', 16, 1, @Student_Mail);
        END
        ELSE IF @ErrorNumber = 547 -- FK or CHECK
        BEGIN
            IF CHARINDEX('FK_Student_Group', @ErrorMessage) > 0
                RAISERROR('FK Error: Group_ID %d does not exist.', 16, 1, @Intake_Branch_Track_ID);
            ELSE
                RAISERROR('CK Error: Data violates a CHECK constraint (Gender, Marital_Status, Age, Grade, Status).', 16, 1);
        END
        ELSE IF @ErrorNumber = 515 -- NOT NULL
        BEGIN
            RAISERROR('NULL Error: One or more required fields were set to NULL.', 16, 1);
        END
        ELSE
        BEGIN
            RAISERROR('Error updating Student: %s', 16, 1, @ErrorMessage);
        END
        RETURN -1;
    END CATCH
END;
GO

-- =============================================
-- Delete procedure for Student
-- =============================================
CREATE PROCEDURE sp_Student_Delete
    @Student_ID INT
AS
BEGIN
    SET NOCOUNT ON;
    BEGIN TRY
        BEGIN TRANSACTION;

        -- 1. Check if record exists
        IF NOT EXISTS (SELECT 1 FROM Student WHERE Student_ID = @Student_ID)
        BEGIN
            RAISERROR('Not Found: Student_ID %d does not exist.', 16, 1, @Student_ID);
            ROLLBACK TRANSACTION;
            RETURN -1;
        END;

        -- 2. Check for related records (NO ACTION FKs)
        IF EXISTS (SELECT 1 FROM Rating WHERE Student_ID = @Student_ID)
        BEGIN
            RAISERROR('FK Error: Cannot delete Student. They have existing ratings. Remove ratings first.', 16, 1);
            ROLLBACK TRANSACTION;
            RETURN -1;
        END;

        IF EXISTS (SELECT 1 FROM Student_Exam_Answer WHERE Student_ID = @Student_ID)
        BEGIN
            RAISERROR('FK Error: Cannot delete Student. They have existing exam answers. Remove answers first.', 16, 1);
            ROLLBACK TRANSACTION;
            RETURN -1;
        END;

        -- 3. Perform DELETE (will cascade to many tables: Phone, Social, Company, Course, etc.)
        PRINT 'Note: Deleting this Student will cascade delete related records in Failed_Students, Student_Phone, Student_Social, Freelance_Job, Certificate, Student_Company, and Student_Course.';
        
        DELETE FROM Student
        WHERE Student_ID = @Student_ID;

        COMMIT TRANSACTION;
        PRINT 'Student record and all related cascading data deleted successfully.';
        RETURN 0;
    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT > 0
            ROLLBACK TRANSACTION;

        DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
        DECLARE @ErrorNumber INT = ERROR_NUMBER();

        IF @ErrorNumber = 547
        BEGIN
            RAISERROR('FK Error: Cannot delete Student. They are referenced by a table without ON DELETE CASCADE (e.g., Rating, Student_Exam_Answer).', 16, 1);
        END
        ELSE
        BEGIN
            RAISERROR('Error deleting Student: %s', 16, 1, @ErrorMessage);
        END
        RETURN -1;
    END CATCH
END;
GO

--------------------------------------------------------------------------------
-- Table: Student_Company
--------------------------------------------------------------------------------

-- =============================================
-- Create procedure for Student_Company
-- =============================================
CREATE PROCEDURE sp_Student_Company_Insert
    @Student_ID INT,
    @Company_ID INT,
    @Salary DECIMAL(12,2),
    @Position NVARCHAR(100),
    @Contract_Type NVARCHAR(50),
    @Hire_Date DATE,
    @Leave_Date DATE
AS
BEGIN
    SET NOCOUNT ON;
    BEGIN TRY
        BEGIN TRANSACTION;

        -- 1. Check for Composite Primary Key conflict
        IF EXISTS (SELECT 1 FROM Student_Company WHERE Student_ID = @Student_ID AND Company_ID = @Company_ID)
        BEGIN
            RAISERROR('PK Error: Student %d is already linked to Company %d.', 16, 1, @Student_ID, @Company_ID);
            ROLLBACK TRANSACTION;
            RETURN -1;
        END;

        -- 2. Check Foreign Key (Student)
        IF NOT EXISTS (SELECT 1 FROM Student WHERE Student_ID = @Student_ID)
        BEGIN
            RAISERROR('FK Error: Student_ID %d does not exist in Student table.', 16, 1, @Student_ID);
            ROLLBACK TRANSACTION;
            RETURN -1;
        END;

        -- 3. Check Foreign Key (Company)
        IF NOT EXISTS (SELECT 1 FROM Company WHERE Company_ID = @Company_ID)
        BEGIN
            RAISERROR('FK Error: Company_ID %d does not exist in Company table.', 16, 1, @Company_ID);
            ROLLBACK TRANSACTION;
            RETURN -1;
        END;

        -- 4. Check CHECK Constraint
        IF @Contract_Type NOT IN (N'Full-Time', N'Part-Time')
        BEGIN
            RAISERROR('CK Error: Contract_Type ''%s'' is not valid.', 16, 1, @Contract_Type);
            ROLLBACK TRANSACTION;
            RETURN -1;
        END;

        -- 5. Perform INSERT
        INSERT INTO Student_Company (Student_ID, Company_ID, Salary, Position, Contract_Type, Hire_Date, Leave_Date)
        VALUES (@Student_ID, @Company_ID, @Salary, @Position, @Contract_Type, @Hire_Date, @Leave_Date);

        COMMIT TRANSACTION;
        PRINT 'Student_Company record inserted successfully.';
        RETURN 0;
    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT > 0
            ROLLBACK TRANSACTION;

        DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
        DECLARE @ErrorNumber INT = ERROR_NUMBER();

        IF @ErrorNumber = 2627 OR @ErrorNumber = 2601 -- PK
        BEGIN
            RAISERROR('PK Error: Student %d is already linked to Company %d.', 16, 1, @Student_ID, @Company_ID);
        END
        ELSE IF @ErrorNumber = 547 -- FK or CHECK
        BEGIN
            IF CHARINDEX('FK_Student_Company_Student', @ErrorMessage) > 0
                RAISERROR('FK Error: Student_ID %d does not exist.', 16, 1, @Student_ID);
            ELSE IF CHARINDEX('FK_Student_Company_Company', @ErrorMessage) > 0
                RAISERROR('FK Error: Company_ID %d does not exist.', 16, 1, @Company_ID);
            ELSE
                RAISERROR('CK Error: Invalid Contract_Type ''%s''.', 16, 1, @Contract_Type);
        END
        ELSE
        BEGIN
            RAISERROR('Error inserting Student_Company: %s', 16, 1, @ErrorMessage);
        END
        RETURN -1;
    END CATCH
END;
GO

-- =============================================
-- Read procedure for Student_Company
-- =============================================
CREATE PROCEDURE sp_Student_Company_Select
    @Student_ID INT = NULL,
    @Company_ID INT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    BEGIN TRY
        IF @Student_ID IS NOT NULL AND @Company_ID IS NOT NULL
        BEGIN
            -- Select specific record
            SELECT * FROM Student_Company WHERE Student_ID = @Student_ID AND Company_ID = @Company_ID;
        END
        ELSE IF @Student_ID IS NOT NULL
        BEGIN
            -- Select all companies for a student
            SELECT * FROM Student_Company WHERE Student_ID = @Student_ID;
        END
        ELSE IF @Company_ID IS NOT NULL
        BEGIN
            -- Select all students for a company
            SELECT * FROM Student_Company WHERE Company_ID = @Company_ID;
        END
        ELSE
        BEGIN
            -- Select all records
            SELECT * FROM Student_Company;
        END
    END TRY
    BEGIN CATCH
        DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
        RAISERROR('Error selecting Student_Company: %s', 16, 1, @ErrorMessage);
        RETURN -1;
    END CATCH
END;
GO

-- =============================================
-- Update procedure for Student_Company
-- =============================================
CREATE PROCEDURE sp_Student_Company_Update
    @Student_ID INT,
    @Company_ID INT,
    @Salary DECIMAL(12,2),
    @Position NVARCHAR(100),
    @Contract_Type NVARCHAR(50),
    @Hire_Date DATE,
    @Leave_Date DATE
AS
BEGIN
    SET NOCOUNT ON;
    BEGIN TRY
        BEGIN TRANSACTION;

        -- 1. Check if record exists
        IF NOT EXISTS (SELECT 1 FROM Student_Company WHERE Student_ID = @Student_ID AND Company_ID = @Company_ID)
        BEGIN
            RAISERROR('Not Found: Link for Student %d and Company %d does not exist.', 16, 1, @Student_ID, @Company_ID);
            ROLLBACK TRANSACTION;
            RETURN -1;
        END;

        -- 2. Check CHECK Constraint
        IF @Contract_Type NOT IN (N'Full-Time', N'Part-Time')
        BEGIN
            RAISERROR('CK Error: Contract_Type ''%s'' is not valid.', 16, 1, @Contract_Type);
            ROLLBACK TRANSACTION;
            RETURN -1;
        END;

        -- 3. Perform UPDATE
        UPDATE Student_Company
        SET Salary = @Salary,
            Position = @Position,
            Contract_Type = @Contract_Type,
            Hire_Date = @Hire_Date,
            Leave_Date = @Leave_Date
        WHERE Student_ID = @Student_ID AND Company_ID = @Company_ID;

        COMMIT TRANSACTION;
        PRINT 'Student_Company record updated successfully.';
        RETURN 0;
    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT > 0
            ROLLBACK TRANSACTION;

        DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
        DECLARE @ErrorNumber INT = ERROR_NUMBER();

        IF @ErrorNumber = 547 -- CHECK
        BEGIN
            RAISERROR('CK Error: Invalid Contract_Type ''%s''.', 16, 1, @Contract_Type);
        END
        ELSE
        BEGIN
            RAISERROR('Error updating Student_Company: %s', 16, 1, @ErrorMessage);
        END
        RETURN -1;
    END CATCH
END;
GO

-- =============================================
-- Delete procedure for Student_Company
-- =============================================
CREATE PROCEDURE sp_Student_Company_Delete
    @Student_ID INT,
    @Company_ID INT
AS
BEGIN
    SET NOCOUNT ON;
    BEGIN TRY
        BEGIN TRANSACTION;

        -- 1. Check if record exists
        IF NOT EXISTS (SELECT 1 FROM Student_Company WHERE Student_ID = @Student_ID AND Company_ID = @Company_ID)
        BEGIN
            RAISERROR('Not Found: Link for Student %d and Company %d does not exist.', 16, 1, @Student_ID, @Company_ID);
            ROLLBACK TRANSACTION;
            RETURN -1;
        END;

        -- 2. Perform DELETE (No FKs point *from* this table)
        DELETE FROM Student_Company
        WHERE Student_ID = @Student_ID AND Company_ID = @Company_ID;

        COMMIT TRANSACTION;
        PRINT 'Student_Company record deleted successfully.';
        RETURN 0;
    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT > 0
            ROLLBACK TRANSACTION;

        DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
        RAISERROR('Error deleting Student_Company: %s', 16, 1, @ErrorMessage);
        RETURN -1;
    END CATCH
END;
GO

--------------------------------------------------------------------------------
-- Table: Student_Course
--------------------------------------------------------------------------------

-- =============================================
-- Create procedure for Student_Course
-- =============================================
CREATE PROCEDURE sp_Student_Course_Insert
    @Student_ID INT,
    @Course_ID INT,
    @Course_StartDate DATE,
    @Course_EndDate DATE
AS
BEGIN
    SET NOCOUNT ON;
    BEGIN TRY
        BEGIN TRANSACTION;

        -- 1. Check for Composite Primary Key conflict
        IF EXISTS (SELECT 1 FROM Student_Course WHERE Student_ID = @Student_ID AND Course_ID = @Course_ID)
        BEGIN
            RAISERROR('PK Error: Student %d is already enrolled in Course %d.', 16, 1, @Student_ID, @Course_ID);
            ROLLBACK TRANSACTION;
            RETURN -1;
        END;

        -- 2. Check Foreign Key (Student)
        IF NOT EXISTS (SELECT 1 FROM Student WHERE Student_ID = @Student_ID)
        BEGIN
            RAISERROR('FK Error: Student_ID %d does not exist in Student table.', 16, 1, @Student_ID);
            ROLLBACK TRANSACTION;
            RETURN -1;
        END;

        -- 3. Check Foreign Key (Course)
        IF NOT EXISTS (SELECT 1 FROM Course WHERE Course_ID = @Course_ID)
        BEGIN
            RAISERROR('FK Error: Course_ID %d does not exist in Course table.', 16, 1, @Course_ID);
            ROLLBACK TRANSACTION;
            RETURN -1;
        END;

        -- 4. Perform INSERT
        INSERT INTO Student_Course (Student_ID, Course_ID, Course_StartDate, Course_EndDate)
        VALUES (@Student_ID, @Course_ID, @Course_StartDate, @Course_EndDate);

        COMMIT TRANSACTION;
        PRINT 'Student_Course record inserted successfully.';
        RETURN 0;
    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT > 0
            ROLLBACK TRANSACTION;

        DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
        DECLARE @ErrorNumber INT = ERROR_NUMBER();

        IF @ErrorNumber = 2627 OR @ErrorNumber = 2601 -- PK
        BEGIN
            RAISERROR('PK Error: Student %d is already enrolled in Course %d.', 16, 1, @Student_ID, @Course_ID);
        END
        ELSE IF @ErrorNumber = 547 -- FK
        BEGIN
            IF CHARINDEX('FK_Student_Course_Student', @ErrorMessage) > 0
                RAISERROR('FK Error: Student_ID %d does not exist.', 16, 1, @Student_ID);
            ELSE
                RAISERROR('FK Error: Course_ID %d does not exist.', 16, 1, @Course_ID);
        END
        ELSE
        BEGIN
            RAISERROR('Error inserting Student_Course: %s', 16, 1, @ErrorMessage);
        END
        RETURN -1;
    END CATCH
END;
GO

-- =============================================
-- Read procedure for Student_Course
-- =============================================
CREATE PROCEDURE sp_Student_Course_Select
    @Student_ID INT = NULL,
    @Course_ID INT = NULL
AS
BEGIN
    SET NOCOUNT ON;
    BEGIN TRY
        IF @Student_ID IS NOT NULL AND @Course_ID IS NOT NULL
        BEGIN
            -- Select specific record
            SELECT * FROM Student_Course WHERE Student_ID = @Student_ID AND Course_ID = @Course_ID;
        END
        ELSE IF @Student_ID IS NOT NULL
        BEGIN
            -- Select all courses for a student
            SELECT * FROM Student_Course WHERE Student_ID = @Student_ID;
        END
        ELSE IF @Course_ID IS NOT NULL
        BEGIN
            -- Select all students in a course
            SELECT * FROM Student_Course WHERE Course_ID = @Course_ID;
        END
        ELSE
        BEGIN
            -- Select all records
            SELECT * FROM Student_Course;
        END
    END TRY
    BEGIN CATCH
        DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
        RAISERROR('Error selecting Student_Course: %s', 16, 1, @ErrorMessage);
        RETURN -1;
    END CATCH
END;
GO

-- =============================================
-- Update procedure for Student_Course
-- =============================================
CREATE PROCEDURE sp_Student_Course_Update
    @Student_ID INT,
    @Course_ID INT,
    @Course_StartDate DATE,
    @Course_EndDate DATE
AS
BEGIN
    SET NOCOUNT ON;
    BEGIN TRY
        BEGIN TRANSACTION;

        -- 1. Check if record exists
        IF NOT EXISTS (SELECT 1 FROM Student_Course WHERE Student_ID = @Student_ID AND Course_ID = @Course_ID)
        BEGIN
            RAISERROR('Not Found: Link for Student %d and Course %d does not exist.', 16, 1, @Student_ID, @Course_ID);
            ROLLBACK TRANSACTION;
            RETURN -1;
        END;

        -- 2. Perform UPDATE
        UPDATE Student_Course
        SET Course_StartDate = @Course_StartDate,
            Course_EndDate = @Course_EndDate
        WHERE Student_ID = @Student_ID AND Course_ID = @Course_ID;

        COMMIT TRANSACTION;
        PRINT 'Student_Course record updated successfully.';
        RETURN 0;
    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT > 0
            ROLLBACK TRANSACTION;

        DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
        RAISERROR('Error updating Student_Course: %s', 16, 1, @ErrorMessage);
        RETURN -1;
    END CATCH
END;
GO

-- =============================================
-- Delete procedure for Student_Course
-- =============================================
CREATE PROCEDURE sp_Student_Course_Delete
    @Student_ID INT,
    @Course_ID INT
AS
BEGIN
    SET NOCOUNT ON;
    BEGIN TRY
        BEGIN TRANSACTION;

        -- 1. Check if record exists
        IF NOT EXISTS (SELECT 1 FROM Student_Course WHERE Student_ID = @Student_ID AND Course_ID = @Course_ID)
        BEGIN
            RAISERROR('Not Found: Link for Student %d and Course %d does not exist.', 16, 1, @Student_ID, @Course_ID);
            ROLLBACK TRANSACTION;
            RETURN -1;
        END;

        -- 2. Perform DELETE (No FKs point *from* this table)
        DELETE FROM Student_Course
        WHERE Student_ID = @Student_ID AND Course_ID = @Course_ID;

        COMMIT TRANSACTION;
        PRINT 'Student_Course record deleted successfully.';
        RETURN 0;
    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT > 0
            ROLLBACK TRANSACTION;

        DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
        RAISERROR('Error deleting Student_Course: %s', 16, 1, @ErrorMessage);
        RETURN -1;
    END CATCH
END;
GO

PRINT 'All CRUD procedures created successfully.';
