CREATE TABLE Rating (
    Student_ID INT NOT NULL,
    Instructor_ID INT NOT NULL,
    RatingValue TINYINT NOT NULL CHECK (RatingValue BETWEEN 1 AND 10),
    PRIMARY KEY (Student_ID, Instructor_ID),
    FOREIGN KEY (Student_ID) REFERENCES Student(Student_ID),
    FOREIGN KEY (Instructor_ID) REFERENCES Instructor(Instructor_ID) 
);


write SQL script to insert rating to all instructors in the database from students who were taught by these instructor 
each student study 12 courses from 12 instructor so each student should give 12 ratings 
student id is not sequential and we have 12900 student so you should make a loop to check each student id and his track  and check the instructors who teach courses of his track to make each student give a random rating for all of his instructors 
make a Bias towards some instructors and make them have high rating from most of students especially the heads of each department should have high rating from all students who were taught by them
and you should know that the database have 27 track each track have 7 technical courses and each course have instructor 
and there are 5 courses soft skills are taken by all tracks 

CREATE TABLE Instructor (
    Instructor_ID INT PRIMARY KEY,
    Instructor_Fname NVARCHAR(50) NOT NULL,
    Instructor_Lname NVARCHAR(50) NOT NULL,
    Instructor_Gender NVARCHAR(10) CHECK (Instructor_Gender IN (N'Male', N'Female')),
    Instructor_Birthdate DATE CHECK (DATEADD(year, 18, Instructor_Birthdate) <= GETDATE()),
    Instructor_Marital_Status NVARCHAR(50) CHECK (Instructor_Marital_Status IN (N'Married', N'Single')),
    Instructor_Salary INT  CHECK (Instructor_Salary >= 8000),
    Instructor_Contract_Type NVARCHAR(50) CHECK (Instructor_Contract_Type IN (N'Full-Time', N'Part-Time')),
    Instructor_Email NVARCHAR(150),
    Department_ID INT --The Relation (FOREIGN KEY) Would be Done when Department table is created 
);

CREATE TABLE Department (
    Department_ID INT PRIMARY KEY,
    Department_Name NVARCHAR(200) NOT NULL,
    Manager_ID INT ,
    FOREIGN KEY (Manager_ID) REFERENCES Instructor(Instructor_ID) ON DELETE SET NULL
);
ALTER TABLE Instructor ADD CONSTRAINT FK_Instructor_Department FOREIGN KEY (Department_ID) REFERENCES Department(Department_ID);

CREATE TABLE Intake (
    Intake_ID INT PRIMARY KEY,
    Intake_Name NVARCHAR(200) NOT NULL,
    Intake_Type NVARCHAR(50) CHECK (Intake_Type IN (N'Professional Training Program - (9 Months)' , 
                                                    N'Intensive Code Camps - (4 Months)')),
    Intake_Start_Date DATE NOT NULL,
    Intake_End_Date DATE NOT NULL
);

CREATE TABLE Branch (
    Branch_ID INT PRIMARY KEY,
    Branch_Location NVARCHAR(200),
    Branch_Name NVARCHAR(200) NOT NULL,
    Branch_Start_Date DATE NOT NULL
);

CREATE TABLE Track (
    Track_ID INT  PRIMARY KEY,
    Track_Name NVARCHAR(200) NOT NULL,
    Department_ID INT NOT NULL,
    FOREIGN KEY (Department_ID) REFERENCES Department(Department_ID) ON DELETE CASCADE
);

CREATE TABLE Intake_Branch_Track (
    Intake_Branch_Track_ID INT PRIMARY KEY,
    Intake_ID INT NOT NULL,
    Branch_ID INT NOT NULL,
    Track_ID INT NOT NULL,
    FOREIGN KEY (Intake_ID) REFERENCES Intake(Intake_ID) ON DELETE CASCADE,
    FOREIGN KEY (Track_ID) REFERENCES Track(Track_ID) ON DELETE CASCADE,
    FOREIGN KEY (Branch_ID) REFERENCES Branch(Branch_ID) ON DELETE CASCADE
);

-- ================
-- STUDENT
-- ================
CREATE TABLE Student (
    Student_ID INT  PRIMARY KEY,
    Student_Mail NVARCHAR(100) NOT NULL UNIQUE,
    Student_Address NVARCHAR(255) ,
    Student_Gender NVARCHAR(10) CHECK (Student_Gender IN (N'Male', N'Female')),
    Student_Marital_Status NVARCHAR(50) CHECK (Student_Marital_Status IN (N'Married', N'Single')),
    Student_Fname NVARCHAR(50) NOT NULL,
    Student_Lname NVARCHAR(50) NOT NULL,
    Student_Birthdate DATE NOT NULL CHECK (DATEADD(year, 18, Student_Birthdate) <= GETDATE()),
    Student_Faculty NVARCHAR(100) ,
    Student_Faculty_Grade NVARCHAR(50) CHECK (Student_Faculty_Grade IN (N'Excellent', N'Very Good',N'Good',N'Pass')),
    Student_ITI_Status NVARCHAR(50) CHECK (Student_ITI_Status IN (N'Graduated', N'Failed to Graduate',N'In Progress')),
    Intake_Branch_Track_ID INT NOT NULL,
    FOREIGN KEY (Intake_Branch_Track_ID) REFERENCES Intake_Branch_Track(Intake_Branch_Track_ID) ON DELETE CASCADE,
);

CREATE TABLE Course (
    Course_ID INT PRIMARY KEY,
    Course_Name NVARCHAR(200) NOT NULL
);

CREATE TABLE Track_Course (
    Course_ID INT NOT NULL,
    Track_ID INT NOT NULL,
    PRIMARY KEY (Track_ID, Course_ID),
    FOREIGN KEY (Track_ID) REFERENCES Track(Track_ID) ,
    FOREIGN KEY (Course_ID) REFERENCES Course(Course_ID) 
    
);

CREATE TABLE Instructor_Course (
    Instructor_ID INT NOT NULL,
    Course_ID INT NOT NULL,
    PRIMARY KEY (Instructor_ID, Course_ID),
    FOREIGN KEY (Instructor_ID) REFERENCES Instructor(Instructor_ID) ON DELETE CASCADE,
    FOREIGN KEY (Course_ID) REFERENCES Course(Course_ID) ON DELETE CASCADE
);

CREATE TABLE Student_Course (
    Student_ID INT NOT NULL,
    Course_ID INT NOT NULL,
    Course_StartDate DATE ,
    Course_EndDate DATE ,
    PRIMARY KEY (Student_ID, Course_ID),
    FOREIGN KEY (Student_ID) REFERENCES Student(Student_ID) ON DELETE CASCADE,
    FOREIGN KEY (Course_ID) REFERENCES Course(Course_ID) ON DELETE CASCADE
);
