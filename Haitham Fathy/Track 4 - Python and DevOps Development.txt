-- Department: System Development, Track: Python and DevOps Development, Course: Python & OOP Fundamentals
INSERT INTO Question_Bank (Question_ID, Course_ID, Question_Type, Question_Description, Question_Model_Answer) VALUES (1500, 22, N'MCQ', N'What keyword is used to define a function in Python?', N'def'), (1501, 22, N'True/False', N'Python is a statically typed language.', N'False'), (1502, 22, N'MCQ', N'Which collection is ordered, changeable, and allows duplicate members?', N'List'), (1503, 22, N'MCQ', N'What is the term for bundling data and methods that work on that data within one unit?', N'Encapsulation'), (1504, 22, N'True/False', N'A class is an instance of an object.', N'False'), (1505, 22, N'MCQ', N'Which OOP concept allows a class to inherit attributes and methods from another class?', N'Inheritance'), (1506, 22, N'MCQ', N'How do you start a single-line comment in Python?', N'#'), (1507, 22, N'True/False', N'The `self` parameter in a method refers to the instance of the class.', N'True'), (1508, 22, N'MCQ', N'What method is called automatically when a new object is created?', N'__init__()'), (1509, 22, N'MCQ', N'Which data type is immutable?', N'Tuple'), (1510, 22, N'True/False', N'Indentation is not important in Python syntax.', N'False'), (1511, 22, N'MCQ', N'The ability of an object to take on many forms is known as what?', N'Polymorphism'), (1512, 22, N'True/False', N'A dictionary in Python stores items in an unordered manner.', N'False'), (1513, 22, N'MCQ', N'What is the correct file extension for Python files?', N'.py'), (1514, 22, N'MCQ', N'Which keyword is used to create a class?', N'class');

-- Department: System Development, Track: Python and DevOps Development, Course: Git & DevOps Principles
INSERT INTO Question_Bank (Question_ID, Course_ID, Question_Type, Question_Description, Question_Model_Answer) VALUES (1515, 23, N'MCQ', N'What command is used to stage changes for a commit?', N'git add'), (1516, 23, N'True/False', N'DevOps is a specific tool that you can install.', N'False'), (1517, 23, N'MCQ', N'Which of the following is a core principle of DevOps?', N'Culture of collaboration'), (1518, 23, N'MCQ', N'What command downloads a repository to your local machine?', N'git clone'), (1519, 23, N'True/False', N'A `git push` sends your local commits to the remote repository.', N'True'), (1520, 23, N'MCQ', N'What does "CI" stand for in the context of DevOps?', N'Continuous Integration'), (1521, 23, N'MCQ', N'Which command shows the commit history?', N'git log'), (1522, 23, N'True/False', N'`git branch new_feature` creates and switches to the new branch.', N'False'), (1523, 23, N'MCQ', N'The CALMS framework for DevOps includes Culture, Automation, Lean, Measurement, and...?', N'Sharing'), (1524, 23, N'MCQ', N'What command is used to merge another branch into your current branch?', N'git merge'), (1525, 23, N'True/False', N'The `.gitignore` file specifies intentionally untracked files to ignore.', N'True'), (1526, 23, N'MCQ', N'Which of "The Three Ways" of DevOps focuses on fast feedback?', N'The Second Way'), (1527, 23, N'True/False', N'`git pull` is a combination of `git fetch` and `git merge`.', N'True'), (1528, 23, N'MCQ', N'What is the purpose of a `fork` in platforms like GitHub?', N'To create a personal copy of another user''s repository'), (1529, 23, N'MCQ', N'Which term refers to a pointer to a specific commit?', N'HEAD');

-- Department: System Development, Track: Python and DevOps Development, Course: CI/CD with Jenkins
INSERT INTO Question_Bank (Question_ID, Course_ID, Question_Type, Question_Description, Question_Model_Answer) VALUES (1530, 24, N'MCQ', N'What is the name of the file used for defining a Jenkins Pipeline as Code?', N'Jenkinsfile'), (1531, 24, N'True/False', N'Jenkins is primarily a source code management tool.', N'False'), (1532, 24, N'MCQ', N'A Jenkins "pipeline" is a suite of plugins that supports implementing and integrating...?', N'Continuous Delivery pipelines'), (1533, 24, N'MCQ', N'Which of these is a common type of Jenkins job?', N'Freestyle project'), (1534, 24, N'True/False', N'A Jenkins agent is the central, coordinating process which stores configuration.', N'False'), (1535, 24, N'MCQ', N'What language is used to write a Jenkinsfile?', N'Groovy'), (1536, 24, N'MCQ', N'In a Declarative Pipeline, what block contains the steps to be executed?', N'steps'), (1537, 24, N'True/False', N'CI involves automatically building and testing code changes frequently.', N'True'), (1538, 24, N'MCQ', N'What is the concept of distributing builds across multiple machines in Jenkins?', N'Master/Agent Architecture'), (1539, 24, N'MCQ', N'Which section of a Declarative Pipeline specifies where the Pipeline will execute?', N'agent'), (1540, 24, N'True/False', N'Jenkins can only be triggered manually by a user.', N'False'), (1541, 24, N'MCQ', N'What is the purpose of the "build" stage in a typical CI/CD pipeline?', N'Compile source code and create artifacts'), (1542, 24, N'True/False', N'You cannot use parameters in a Jenkins job.', N'False'), (1543, 24, N'MCQ', N'Which plugin is fundamental for using Git with Jenkins?', N'Git Plugin'), (1544, 24, N'MCQ', N'CD stands for Continuous Delivery or Continuous...?', N'Deployment');

-- Department: System Development, Track: Python and DevOps Development, Course: Docker & Kubernetes
INSERT INTO Question_Bank (Question_ID, Course_ID, Question_Type, Question_Description, Question_Model_Answer) VALUES (1545, 25, N'MCQ', N'What is a running instance of a Docker image called?', N'Container'), (1546, 25, N'True/False', N'A Docker image is a lightweight, standalone, executable package.', N'True'), (1547, 25, N'MCQ', N'What is the name of the text file that contains commands to assemble a Docker image?', N'Dockerfile'), (1548, 25, N'MCQ', N'Kubernetes is a tool for container...?', N'Orchestration'), (1549, 25, N'True/False', N'A Kubernetes Pod can contain multiple containers.', N'True'), (1550, 25, N'MCQ', N'What is the primary command-line tool for interacting with a Kubernetes cluster?', N'kubectl'), (1551, 25, N'MCQ', N'In Docker, what is used to store and distribute images?', N'A registry'), (1552, 25, N'True/False', N'Containers run on a full-blown guest operating system.', N'False'), (1553, 25, N'MCQ', N'Which Kubernetes component is responsible for maintaining a set of replica Pods?', N'Deployment'), (1554, 25, N'MCQ', N'What Docker command lists all running containers?', N'docker ps'), (1555, 25, N'True/False', N'Docker volumes are used for persisting data generated by containers.', N'True'), (1556, 25, N'MCQ', N'Which Kubernetes object provides a stable network endpoint for a set of Pods?', N'Service'), (1557, 25, N'True/False', N'Kubernetes was originally developed by Microsoft.', N'False'), (1558, 25, N'MCQ', N'What instruction in a Dockerfile sets the base image for subsequent instructions?', N'FROM'), (1559, 25, N'MCQ', N'The smallest deployable unit in Kubernetes is a...?', N'Pod');

-- Department: System Development, Track: Python and DevOps Development, Course: Ansible & Terraform
INSERT INTO Question_Bank (Question_ID, Course_ID, Question_Type, Question_Description, Question_Model_Answer) VALUES (1560, 26, N'MCQ', N'Which tool is primarily used for Infrastructure as Code (IaC) provisioning?', N'Terraform'), (1561, 26, N'True/False', N'Ansible requires agents to be installed on managed nodes.', N'False'), (1562, 26, N'MCQ', N'What is the main configuration file for Terraform called?', N'main.tf'), (1563, 26, N'MCQ', N'An Ansible script containing a list of tasks is called a...?', N'Playbook'), (1564, 26, N'True/False', N'Terraform uses a declarative language called HCL.', N'True'), (1565, 26, N'MCQ', N'Which command in Terraform shows what changes will be made to your infrastructure?', N'terraform plan'), (1566, 26, N'MCQ', N'In Ansible, what file defines the hosts that Ansible will manage?', N'Inventory'), (1567, 26, N'True/False', N'Ansible is best suited for infrastructure provisioning from scratch.', N'False'), (1568, 26, N'MCQ', N'What is the term for an operation that produces the same result if executed multiple times?', N'Idempotency'), (1569, 26, N'MCQ', N'What file does Terraform use to store the state of the managed infrastructure?', N'terraform.tfstate'), (1570, 26, N'True/False', N'`terraform apply` will destroy all your infrastructure.', N'False'), (1571, 26, N'MCQ', N'Ansible connects to managed nodes primarily using which protocol?', N'SSH'), (1572, 26, N'True/False', N'Terraform is an agentless tool.', N'True'), (1573, 26, N'MCQ', N'What are the reusable units of code in Ansible called?', N'Modules'), (1574, 26, N'MCQ', N'Terraform is primarily a tool for...?', N'Infrastructure Provisioning');

-- Department: System Development, Track: Python and DevOps Development, Course: Microservices & Automated Testing
INSERT INTO Question_Bank (Question_ID, Course_ID, Question_Type, Question_Description, Question_Model_Answer) VALUES (1575, 27, N'MCQ', N'Which architectural style structures an application as a collection of small, autonomous services?', N'Microservices'), (1576, 27, N'True/False', N'In a microservice architecture, all services must share the same database.', N'False'), (1577, 27, N'MCQ', N'What type of testing verifies the functionality of individual software components in isolation?', N'Unit Testing'), (1578, 27, N'MCQ', N'What component in a microservice architecture acts as a single entry point for all clients?', N'API Gateway'), (1579, 27, N'True/False', N'The test pyramid suggests writing many more end-to-end tests than unit tests.', N'False'), (1580, 27, N'MCQ', N'Which testing level focuses on verifying the interaction between different components or services?', N'Integration Testing'), (1581, 27, N'MCQ', N'What is a common pattern for communication between microservices?', N'REST APIs'), (1582, 27, N'True/False', N'A monolithic application is built as a single, unified unit.', N'True'), (1583, 27, N'MCQ', N'What is the practice of automatically checking for bugs with every code change called?', N'Automated Testing'), (1584, 27, N'MCQ', N'Which concept allows microservices to find and communicate with each other dynamically?', N'Service Discovery'), (1585, 27, N'True/False', N'Microservices increase the complexity of deployment and monitoring.', N'True'), (1586, 27, N'MCQ', N'What does TDD stand for?', N'Test-Driven Development'), (1587, 27, N'True/False', N'Integration tests are generally faster to run than unit tests.', N'False'), (1588, 27, N'MCQ', N'A key benefit of microservices is...?', N'Independent deployment'), (1589, 27, N'MCQ', N'Which testing simulates user behavior and tests the entire application flow?', N'End-to-End Testing');

-- Department: System Development, Track: Python and DevOps Development, Course: DevOps Pipeline Capstone Project
INSERT INTO Question_Bank (Question_ID, Course_ID, Question_Type, Question_Description, Question_Model_Answer) VALUES (1590, 28, N'MCQ', N'What is the first stage in a typical CI/CD pipeline?', N'Commit'), (1591, 28, N'True/False', N'Security should only be considered at the end of the pipeline.', N'False'), (1592, 28, N'MCQ', N'Which practice involves integrating security into every phase of the DevOps lifecycle?', N'DevSecOps'), (1593, 28, N'MCQ', N'What is the primary goal of a CI/CD pipeline?', N'To automate software delivery'), (1594, 28, N'True/False', N'A good pipeline should provide fast feedback to developers.', N'True'), (1595, 28, N'MCQ', N'Which of these is a key metric for monitoring a DevOps pipeline?', N'Deployment Frequency'), (1596, 28, N'MCQ', N'Tools like Prometheus and Grafana are used for...?', N'Monitoring and Visualization'), (1597, 28, N'True/False', N'It is a best practice to store credentials directly in your source code repository.', N'False'), (1598, 28, N'MCQ', N'The concept of treating your infrastructure components like application code is known as...?', N'Infrastructure as Code'), (1599, 28, N'MCQ', N'What is a rollback strategy?', N'A plan to revert to a previous version in case of failure'), (1600, 28, N'True/False', N'A capstone project is meant to integrate multiple tools and concepts learned.', N'True'), (1601, 28, N'MCQ', N'What is the main benefit of using feature flags in a pipeline?', N'To enable/disable functionality without deploying new code'), (1602, 28, N'True/False', N'A successful pipeline never has any failed builds.', N'False'), (1603, 28, N'MCQ', N'The ELK Stack (Elasticsearch, Logstash, Kibana) is used for...?', N'Centralized Logging'), (1604, 28, N'MCQ', N'What does a "build artifact" refer to?', N'The deployable unit produced by the build process');


-- Department: System Development, Track: Python and DevOps Development, Course: Python & OOP Fundamentals
INSERT INTO Question_Choice (Question_Choice_ID, Question_ID, Choice_Text) VALUES (1500, 1500, N'fun'), (1501, 1500, N'def'), (1502, 1500, N'function'), (1503, 1500, N'define'), (1504, 1502, N'Set'), (1505, 1502, N'Tuple'), (1506, 1502, N'Dictionary'), (1507, 1502, N'List'), (1508, 1503, N'Inheritance'), (1509, 1503, N'Polymorphism'), (1510, 1503, N'Encapsulation'), (1511, 1503, N'Abstraction'), (1512, 1505, N'Inheritance'), (1513, 1505, N'Polymorphism'), (1514, 1505, N'Abstraction'), (1515, 1505, N'Encapsulation'), (1516, 1506, N'//'), (1517, 1506, N'/*'), (1518, 1506, N'--'), (1519, 1506, N'#'), (1520, 1508, N'__main__()'), (1521, 1508, N'__construct()'), (1522, 1508, N'__init__()'), (1523, 1508, N'__start__()'), (1524, 1509, N'List'), (1525, 1509, N'Dictionary'), (1526, 1509, N'Tuple'), (1527, 1509, N'Set'), (1528, 1511, N'Encapsulation'), (1529, 1511, N'Inheritance'), (1530, 1511, N'Polymorphism'), (1531, 1511, N'Abstraction'), (1532, 1513, N'.py'), (1533, 1513, N'.pyt'), (1534, 1513, N'.ph'), (1535, 1513, N'.pt'), (1536, 1514, N'class'), (1537, 1514, N'object'), (1538, 1514, N'def'), (1539, 1514, N'new');

-- Department: System Development, Track: Python and DevOps Development, Course: Git & DevOps Principles
INSERT INTO Question_Choice (Question_Choice_ID, Question_ID, Choice_Text) VALUES (1540, 1515, N'git commit'), (1541, 1515, N'git stage'), (1542, 1515, N'git add'), (1543, 1515, N'git push'), (1544, 1517, N'Separation of teams'), (1545, 1517, N'Manual processes'), (1546, 1517, N'Culture of collaboration'), (1547, 1517, N'Infrequent releases'), (1548, 1518, N'git pull'), (1549, 1518, N'git clone'), (1550, 1518, N'git fetch'), (1551, 1518, N'git copy'), (1552, 1520, N'Continuous Integration'), (1553, 1520, N'Code Inspection'), (1554, 1520, N'Controlled Input'), (1555, 1520, N'Code Integration'), (1556, 1521, N'git status'), (1557, 1521, N'git history'), (1558, 1521, N'git log'), (1559, 1521, N'git diff'), (1560, 1523, N'Stability'), (1561, 1523, N'Silos'), (1562, 1523, N'Security'), (1563, 1523, N'Sharing'), (1564, 1524, N'git add'), (1565, 1524, N'git commit'), (1566, 1524, N'git merge'), (1567, 1524, N'git join'), (1568, 1526, N'The First Way'), (1569, 1526, N'The Second Way'), (1570, 1526, N'The Third Way'), (1571, 1526, N'The Fourth Way'), (1572, 1528, N'To delete a repository'), (1573, 1528, N'To create a personal copy of another user''s repository'), (1574, 1528, N'To create a new branch'), (1575, 1528, N'To submit a bug report'), (1576, 1529, N'Branch'), (1577, 1529, N'Tag'), (1578, 1529, N'HEAD'), (1579, 1529, N'Master');

-- Department: System Development, Track: Python and DevOps Development, Course: CI/CD with Jenkins
INSERT INTO Question_Choice (Question_Choice_ID, Question_ID, Choice_Text) VALUES (1580, 1530, N'Jenkinsfile'), (1581, 1530, N'config.yml'), (1582, 1530, N'pipeline.groovy'), (1583, 1530, N'build.xml'), (1584, 1532, N'Source Code Management'), (1585, 1532, N'Continuous Delivery pipelines'), (1586, 1532, N'Project Management'), (1587, 1532, N'Database Administration'), (1588, 1533, N'Git Project'), (1589, 1533, N'Pipeline'), (1590, 1533, N'Freestyle project'), (1591, 1533, N'Docker Project'), (1592, 1535, N'Python'), (1593, 1535, N'Java'), (1594, 1535, N'Groovy'), (1595, 1535, N'YAML'), (1596, 1536, N'agent'), (1597, 1536, N'stages'), (1598, 1536, N'steps'), (1599, 1536, N'post'), (1600, 1538, N'Freestyle Projects'), (1601, 1538, N'Pipeline as Code'), (1602, 1538, N'Master/Agent Architecture'), (1603, 1538, N'Plugin Management'), (1604, 1539, N'agent'), (1605, 1539, N'environment'), (1606, 1539, N'tools'), (1607, 1539, N'triggers'), (1608, 1541, N'Run unit tests'), (1609, 1541, N'Deploy to production'), (1610, 1541, N'Compile source code and create artifacts'), (1611, 1541, N'Notify developers'), (1612, 1543, N'Docker Plugin'), (1613, 1543, N'Maven Plugin'), (1614, 1543, N'Git Plugin'), (1615, 1543, N'Blue Ocean Plugin'), (1616, 1544, N'Development'), (1617, 1544, N'Dashboard'), (1618, 1544, N'Deployment'), (1619, 1544, N'Documentation');

-- Department: System Development, Track: Python and DevOps Development, Course: Docker & Kubernetes
INSERT INTO Question_Choice (Question_Choice_ID, Question_ID, Choice_Text) VALUES (1620, 1545, N'Image'), (1621, 1545, N'Container'), (1622, 1545, N'Dockerfile'), (1623, 1545, N'Volume'), (1624, 1547, N'Docker.yml'), (1625, 1547, N'build.file'), (1626, 1547, N'Dockerfile'), (1627, 1547, N'Containerfile'), (1628, 1548, N'Building'), (1629, 1548, N'Networking'), (1630, 1548, N'Orchestration'), (1631, 1548, N'Storage'), (1632, 1550, N'k8s'), (1633, 1550, N'kubeadm'), (1634, 1550, N'docker'), (1635, 1550, N'kubectl'), (1636, 1551, N'A repository'), (1637, 1551, N'An image layer'), (1638, 1551, N'A registry'), (1639, 1551, N'A volume'), (1640, 1553, N'Service'), (1641, 1553, N'Pod'), (1642, 1553, N'Deployment'), (1643, 1553, N'Namespace'), (1644, 1554, N'docker list'), (1645, 1554, N'docker ps'), (1646, 1554, N'docker images'), (1647, 1554, N'docker run'), (1648, 1556, N'Service'), (1649, 1556, N'Ingress'), (1650, 1556, N'Pod'), (1651, 1556, N'ReplicaSet'), (1652, 1558, N'RUN'), (1653, 1558, N'BASE'), (1654, 1558, N'FROM'), (1655, 1558, N'IMAGE'), (1656, 1559, N'Container'), (1657, 1559, N'Service'), (1658, 1559, N'Pod'), (1659, 1559, N'Node');

-- Department: System Development, Track: Python and DevOps Development, Course: Ansible & Terraform
INSERT INTO Question_Choice (Question_Choice_ID, Question_ID, Choice_Text) VALUES (1660, 1560, N'Ansible'), (1661, 1560, N'Docker'), (1662, 1560, N'Jenkins'), (1663, 1560, N'Terraform'), (1664, 1562, N'playbook.yml'), (1665, 1562, N'main.tf'), (1666, 1562, N'variables.tf'), (1667, 1562, N'terraform.rc'), (1668, 1563, N'Recipe'), (1669, 1563, N'Manifest'), (1670, 1563, N'Playbook'), (1671, 1563, N'Module'), (1672, 1565, N'terraform init'), (1673, 1565, N'terraform apply'), (1674, 1565, N'terraform plan'), (1675, 1565, N'terraform show'), (1676, 1566, N'Playbook'), (1677, 1566, N'Inventory'), (1678, 1566, N'Role'), (1679, 1566, N'ansible.cfg'), (1680, 1568, N'Automation'), (1681, 1568, N'Orchestration'), (1682, 1568, N'Idempotency'), (1683, 1568, N'Declaration'), (1684, 1569, N'terraform.plan'), (1685, 1569, N'terraform.log'), (1686, 1569, N'terraform.tfstate'), (1687, 1569, N'provider.tf'), (1688, 1571, N'RDP'), (1689, 1571, N'FTP'), (1690, 1571, N'SSH'), (1691, 1571, N'HTTP'), (1692, 1573, N'Playbooks'), (1693, 1573, N'Tasks'), (1694, 1573, N'Inventories'), (1695, 1573, N'Modules'), (1696, 1574, N'Configuration Management'), (1697, 1574, N'Infrastructure Provisioning'), (1698, 1574, N'Continuous Integration'), (1699, 1574, N'Log Management');

-- Department: System Development, Track: Python and DevOps Development, Course: Microservices & Automated Testing
INSERT INTO Question_Choice (Question_Choice_ID, Question_ID, Choice_Text) VALUES (1700, 1575, N'Monolithic'), (1701, 1575, N'Microservices'), (1702, 1575, N'Client-Server'), (1703, 1575, N'Layered'), (1704, 1577, N'Integration Testing'), (1705, 1577, N'End-to-End Testing'), (1706, 1577, N'Unit Testing'), (1707, 1577, N'Performance Testing'), (1708, 1578, N'Service Mesh'), (1709, 1578, N'Load Balancer'), (1710, 1578, N'API Gateway'), (1711, 1578, N'Service Discovery'), (1712, 1580, N'Unit Testing'), (1713, 1580, N'Integration Testing'), (1714, 1580, N'Acceptance Testing'), (1715, 1580, N'System Testing'), (1716, 1581, N'SOAP'), (1717, 1581, N'File Sharing'), (1718, 1581, N'RPC'), (1719, 1581, N'REST APIs'), (1720, 1583, N'Manual Testing'), (1721, 1583, N'Exploratory Testing'), (1722, 1583, N'Automated Testing'), (1723, 1583, N'Usability Testing'), (1724, 1584, N'API Gateway'), (1725, 1584, N'Service Discovery'), (1726, 1584, N'Circuit Breaker'), (1727, 1584, N'Configuration Server'), (1728, 1586, N'Technology-Driven Development'), (1729, 1586, N'Test-Driven Development'), (1730, 1586, N'Team-Driven Design'), (1731, 1586, N'Test-Data Driven'), (1732, 1588, N'Simplified codebase'), (1733, 1588, N'No need for automation'), (1734, 1588, N'Independent deployment'), (1735, 1588, N'Single point of failure'), (1736, 1589, N'Unit Testing'), (1737, 1589, N'Component Testing'), (1738, 1589, N'Integration Testing'), (1739, 1589, N'End-to-End Testing');

-- Department: System Development, Track: Python and DevOps Development, Course: DevOps Pipeline Capstone Project
INSERT INTO Question_Choice (Question_Choice_ID, Question_ID, Choice_Text) VALUES (1740, 1590, N'Deploy'), (1741, 1590, N'Test'), (1742, 1590, N'Build'), (1743, 1590, N'Commit'), (1744, 1592, N'DevOps'), (1745, 1592, N'SecOps'), (1746, 1592, N'DevSecOps'), (1747, 1592, N'Agile'), (1748, 1593, N'To write more code'), (1749, 1593, N'To automate software delivery'), (1750, 1593, N'To manually test everything'), (1751, 1593, N'To eliminate the need for developers'), (1752, 1595, N'Lines of Code'), (1753, 1595, N'Number of Commits'), (1754, 1595, N'Deployment Frequency'), (1755, 1595, N'Team Size'), (1756, 1596, N'Source Code Management'), (1757, 1596, N'Monitoring and Visualization'), (1758, 1596, N'Code Compilation'), (1759, 1596, N'Security Scanning'), (1760, 1598, N'Continuous Integration'), (1761, 1598, N'Infrastructure as Code'), (1762, 1598, N'Continuous Delivery'), (1763, 1598, N'Configuration Management'), (1764, 1599, N'A plan to always move forward'), (1765, 1599, N'A plan to revert to a previous version in case of failure'), (1766, 1599, N'A plan for testing new features'), (1767, 1599, N'A plan to deploy manually'), (1768, 1601, N'To speed up the build process'), (1769, 1601, N'To enable/disable functionality without deploying new code'), (1770, 1601, N'To automatically fix bugs'), (1771, 1601, N'To manage infrastructure'), (1772, 1603, N'Code Quality Analysis'), (1773, 1603, N'Infrastructure Provisioning'), (1774, 1603, N'Centralized Logging'), (1775, 1603, N'Artifact Storage'), (1776, 1604, N'The source code'), (1777, 1604, N'A test report'), (1778, 1604, N'The deployable unit produced by the build process'), (1779, 1604, N'A commit message');